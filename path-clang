#!/bin/bash
# clang-instr.sh: A wrapper for clang that adds path coverage instrumentation
#
# Usage: Set CC=/path/to/clang-instr.sh before running make

set -e

# Get the directory containing this script
SCRIPT_DIR="$FUZZER"

# Coverage data directory setup
: ${COVERAGE_DIR:="$HOME/.coverage_data"}
mkdir -p "$COVERAGE_DIR"

# Set up environment variables for the instrumentation pass
export BLOCK_COUNTER_FILE="$COVERAGE_DIR/block_counter.txt"
export CFG_FILE="$COVERAGE_DIR/coverage.json"

# Initialize block counter if needed
if [ ! -f "$BLOCK_COUNTER_FILE" ]; then
    echo "0" > "$BLOCK_COUNTER_FILE"
fi

# Initialize CFG file if needed
if [ ! -f "$CFG_FILE" ]; then
    touch "$CFG_FILE"
fi

# Use CLANG env var if set, otherwise default to clang-19
: ${CLANG:=clang-19}
GCC_TOOLCHAIN="/usr"

# Detect if we're in compile-only mode (-c, -S, -E)
compile_only=false
for arg in "$@"; do
  case "$arg" in
    -c|-S|-E)
      compile_only=true
      break
      ;;
  esac
done

if $compile_only; then
    exec "$CLANG" --gcc-toolchain="$GCC_TOOLCHAIN" -fpass-plugin="$SCRIPT_DIR/libCodeCoveragePass.so" "$@"
else
    # Linking - add both plugin and runtime
    exec "$CLANG" --gcc-toolchain="$GCC_TOOLCHAIN" -fpass-plugin="$SCRIPT_DIR/libCodeCoveragePass.so" "$@" "$SCRIPT_DIR/coverage_runtime.o"
fi
